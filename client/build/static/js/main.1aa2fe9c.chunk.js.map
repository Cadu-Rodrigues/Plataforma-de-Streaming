{"version":3,"sources":["services/api.js","hooks/globalState.js","helpers/languagesConfig.js","components/ConfigModal/index.js","components/HelpModal/index.js","components/Header/index.js","components/InfoTable/index.js","components/UploadZone/index.js","helpers/helpers.js","pages/Dashboard/index.js","routes.js","index.js"],"names":["api","axios","create","baseURL","window","location","protocol","host","GlobalStateContext","createContext","GlobalStateProvider","children","useState","language","setLanguage","Provider","value","useGlobalState","context","useContext","Error","pt","titulo","descricao","arquivos","adicionar","nome","modal","heading","label","primaryText","secondaryText","inputLabel","modalHelp","text","es","en","HeaderIcc","open","setOpen","url","setUrl","Modal","modalHeading","textLanguage","modalLabel","primaryButtonText","secondaryButtonText","onRequestClose","onRequestSubmit","e","preventDefault","post","then","response","preventCloseOnClickOutside","TextInput","data-modal-primary-focus","id","labelText","placeholder","style","marginBottom","onChange","target","passiveModal","helpOpen","setHelpOpen","aria-label","href","prefix","onClick","InfoTable","rowData","headerData","key","header","getResults","name","list","fileName","className","DataTable","rows","headers","getHeaderProps","getRowProps","getTableProps","onInputChange","getBatchActionProps","TableContainer","title","TableToolbar","TableToolbarContent","TableToolbarSearch","tabIndex","shouldShowBatchActions","map","Table","TableBody","row","Fragment","TableExpandRow","cells","cell","TableCell","isExpanded","TableExpandedRow","colSpan","length","Object","entries","UploadZone","onUpload","FileUploader","accept","buttonKind","buttonLabel","filenameStatus","iconDescription","multiple","createRows","items","setFiles","files","rowsAux","item","rowAux","push","reverse","file","console","log","Dashboard","match","mensagem","setMensagem","setCompany","a","uploadedFiles","formData","FormData","append","data","useEffect","params","company","Loading","color","Routes","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1aa2fe9c.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL:\n    process.env.NODE_ENV === 'production'\n      ? `${window.location.protocol}//${window.location.host}`\n      : 'http://localhost:3000',\n});\n\nexport default api;\n","import React, { useContext, useState, createContext } from \"react\";\n\nconst GlobalStateContext = createContext({});\n\nexport default function GlobalStateProvider({ children }) {\n  const [language, setLanguage] = useState(\"pt\");\n\n  return (\n    <GlobalStateContext.Provider\n      value={{\n        language,\n        setLanguage,\n      }}\n    >\n      {children}\n    </GlobalStateContext.Provider>\n  );\n}\n\nexport function useGlobalState() {\n  const context = useContext(GlobalStateContext);\n\n  if (!context) {\n    throw new Error(\"useGlobalState must be used within a GlobalStateProvider\");\n  }\n\n  return context;\n}\n","export default {\n  pt: {\n    titulo: \"Upload de arquivos\",\n    descricao: \"Somente arquivos\",\n    arquivos: \"Arquivos\",\n    adicionar: \"Adicionar arquivos\",\n    nome: \"Nome do arquivo\",\n    modal: {\n      heading: \"Defina uma URL\",\n      label: \"Definição da URL da Cloud Function\",\n      primaryText: \"Salvar\",\n      secondaryText: \"Cancelar\",\n      inputLabel: \"URL da API da Cloud Function\",\n    },\n    modalHelp: {\n      heading: \"Ajuda\",\n      text:\n        \"Esta interface permite testar diferentes cloud functions. Para testar uma cloud function, defina a URL de sua API clicando na engrenagem. Depois, insira os arquivos que serão testados. A entrada padrão da cloud function deve ser do tipo: {bucketName, fileName}.\",\n    },\n  },\n  es: {\n    titulo: \"Upload de archivos\",\n    descricao: \"Sólo archivos\",\n    arquivos: \"Archivos\",\n    adicionar: \"Adicionar archivos\",\n    nome: \"Nombre del archivo\",\n    modal: {\n      heading: \"Establecer una URL\",\n      label: \"Configuración de URL de la Cloud Function\",\n      primaryText: \"Salvar\",\n      secondaryText: \"Cancelar\",\n      inputLabel: \"URL de la API de Cloud Function\",\n    },\n    modalHelp: {\n      heading: \"Ayuda\",\n      text:\n        \"Esta interfaz le permite probar diferentes cloud functions. Para probar una cloud function, configure la URL de su API haciendo clic en el engranaje. Luego, inserte los archivos a probar. La entrada predeterminada para la cloud function ser del tipo: {bucketName, fileName}.\",\n    },\n  },\n  en: {\n    titulo: \"Upload files\",\n    descricao: \"Only files\",\n    arquivos: \"Files\",\n    adicionar: \"Add Files\",\n    nome: \"File name\",\n    modal: {\n      heading: \"Set an URL\",\n      label: \"Cloud Function URL Settings\",\n      primaryText: \"Save\",\n      secondaryText: \"Cancel\",\n      inputLabel: \"Cloud Function API URL\",\n    },\n    modalHelp: {\n      heading: \"Help\",\n      text:\n        \"This interface allows you to test different cloud functions. To test a cloud function, set your API URL by clicking on the gear. Then, insert the files to be tested. The default entry for the cloud function must be of the type: {bucketName, fileName}.\",\n    },\n  },\n};\n","import React, { useState } from \"react\";\nimport { useGlobalState } from \"../../hooks/globalState\";\nimport { Modal, TextInput } from \"carbon-components-react\";\nimport textLanguage from \"../../helpers/languagesConfig\";\nimport api from \"../../services/api\";\nimport \"./style.css\";\n\nexport default function HeaderIcc({ open, setOpen }) {\n  const { language } = useGlobalState();\n  const [url, setUrl] = useState(\"\");\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    api.post(\"/config\", { url }).then((response) => {\n      setOpen(false);\n    });\n  }\n  return (\n    <Modal\n      open={open}\n      modalHeading={textLanguage[language].modal.heading}\n      modalLabel={textLanguage[language].modal.label}\n      primaryButtonText={textLanguage[language].modal.primaryText}\n      secondaryButtonText={textLanguage[language].modal.secondaryText}\n      onRequestClose={() => {\n        setOpen(false);\n      }}\n      onRequestSubmit={handleSubmit}\n      preventCloseOnClickOutside\n    >\n      <TextInput\n        data-modal-primary-focus\n        id=\"text-input-1\"\n        labelText={textLanguage[language].modal.inputLabel}\n        placeholder=\"https://547dae57.us-south.apigw.appdomain.cloud/api-name/route\"\n        style={{ marginBottom: \"1rem\" }}\n        onChange={(e) => {\n          setUrl(e.target.value);\n        }}\n      />\n    </Modal>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useGlobalState } from \"../../hooks/globalState\";\nimport { Modal, TextInput } from \"carbon-components-react\";\nimport textLanguage from \"../../helpers/languagesConfig\";\nimport api from \"../../services/api\";\nimport \"./style.css\";\n\nexport default function HeaderIcc({ open, setOpen }) {\n  const { language } = useGlobalState();\n\n  return (\n    <Modal\n      open={open}\n      modalHeading={textLanguage[language].modalHelp.heading}\n      onRequestClose={() => {\n        setOpen(false);\n      }}\n      preventCloseOnClickOutside\n      passiveModal\n    >\n      <p>{textLanguage[language].modalHelp.text}</p>\n    </Modal>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useGlobalState } from \"../../hooks/globalState\";\nimport Settings20 from \"@carbon/icons-react/lib/settings/20\";\nimport Help20 from \"@carbon/icons-react/lib/help/20\";\nimport {\n  Header,\n  HeaderName,\n  HeaderGlobalAction,\n  HeaderGlobalBar,\n} from \"carbon-components-react/lib/components/UIShell\";\nimport ConfigModal from \"../ConfigModal\";\nimport HelpModal from \"../HelpModal\";\nimport \"./style.css\";\n\nexport default function HeaderIcc() {\n  const { language } = useGlobalState();\n  const [open, setOpen] = useState(false);\n  const [helpOpen, setHelpOpen] = useState(false);\n  return (\n    <div id=\"header\">\n      <Header aria-label=\"ICC Cloud Functions Testing\">\n        <HeaderName href={`/ibm/${language}`} prefix=\"ICC\">\n          Cloud Functions Testing\n        </HeaderName>\n        <HeaderGlobalBar>\n          <HeaderGlobalAction\n            aria-label=\"Settings\"\n            onClick={() => {\n              setOpen(true);\n            }}\n          >\n            <Settings20 />\n          </HeaderGlobalAction>\n          <HeaderGlobalAction\n            aria-label=\"Help\"\n            onClick={() => {\n              setHelpOpen(true);\n            }}\n          >\n            <Help20 />\n          </HeaderGlobalAction>\n        </HeaderGlobalBar>\n        <ConfigModal open={open} setOpen={setOpen} />\n        <HelpModal open={helpOpen} setOpen={setHelpOpen} />\n      </Header>\n    </div>\n  );\n}\n","import \"./style.css\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  DataTable,\n  TableContainer,\n  Table,\n  TableBody,\n  TableCell,\n  TableToolbar,\n  TableExpandRow,\n  TableToolbarContent,\n  TableToolbarSearch,\n  TableExpandedRow,\n} from \"carbon-components-react\";\n\nimport { useGlobalState } from \"../../hooks/globalState\";\nimport textLanguage from \"../../helpers/languagesConfig\";\n\nexport default function InfoTable({ rowData }) {\n  const { language } = useGlobalState();\n\n  const headerData = [\n    {\n      key: \"fileName\",\n      header: textLanguage[language].nome,\n    },\n  ];\n\n  function getResults(name) {\n    for (let list of rowData) {\n      if (list.fileName === name) {\n        return list.response;\n      }\n    }\n    return [];\n  }\n\n  return (\n    <div id=\"table\">\n      <div>\n        <div className=\"div-test\">\n          <DataTable rows={rowData} headers={headerData}>\n            {({\n              rows,\n              headers,\n              getHeaderProps,\n              getRowProps,\n              getTableProps,\n              onInputChange,\n              getBatchActionProps,\n            }) => (\n              <TableContainer title={textLanguage[language].arquivos}>\n                <TableToolbar>\n                  <TableToolbarContent>\n                    <TableToolbarSearch\n                      tabIndex={\n                        getBatchActionProps().shouldShowBatchActions ? -1 : 0\n                      }\n                      onChange={onInputChange}\n                    />\n                  </TableToolbarContent>\n                </TableToolbar>\n                <thead className=\"header-table\">\n                  <tr className=\"header-table\">\n                    <div className=\"header-table\">\n                      {headers.map((header) => (\n                        <span\n                          {...getHeaderProps({ header })}\n                          className=\"titulo-table\"\n                        >\n                          {header.header}\n                        </span>\n                      ))}\n                    </div>\n                  </tr>\n                </thead>\n                <Table {...getTableProps()}>\n                  <TableBody>\n                    {rows.map((row) => (\n                      <React.Fragment key={row.id}>\n                        <TableExpandRow id=\"test-\" {...getRowProps({ row })}>\n                          {row.cells.map((cell) => (\n                            <TableCell key={cell.id}>{cell.value}</TableCell>\n                          ))}\n                        </TableExpandRow>\n                        {row.isExpanded && (\n                          <TableExpandedRow colSpan={headers.length + 1}>\n                            <div>\n                              {Object.entries(\n                                getResults(row.cells[0].value)\n                              )?.map(([key, value]) => (\n                                <div>\n                                  <div id=\"expand\">\n                                    {key}: {value}\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                          </TableExpandedRow>\n                        )}\n                      </React.Fragment>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            )}\n          </DataTable>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"carbon-components/css/carbon-components.min.css\";\nimport { useGlobalState } from \"../../hooks/globalState\";\nimport textLanguage from \"../../helpers/languagesConfig\";\nimport { FileUploader } from \"carbon-components-react\";\nimport \"../UploadZone/styles.css\";\n\nexport default function UploadZone({ onUpload }) {\n  const { language } = useGlobalState();\n\n  return (\n    <>\n      <strong className=\"bx--file--label\">\n        {textLanguage[language].titulo}\n      </strong>\n      <p className=\"bx--label-description\"> </p>\n      <div id=\"click\">\n        <FileUploader\n          accept={[\"*\"]}\n          buttonKind=\"primary\"\n          buttonLabel={textLanguage[language].adicionar}\n          filenameStatus=\"edit\"\n          iconDescription=\"Clear file\"\n          multiple\n          id=\"textUpload\"\n          onChange={onUpload}\n        />\n      </div>\n      <div id=\"drop\"></div>\n    </>\n  );\n}\n","export function createRows(items, setFiles, files) {\n  let rowsAux = [];\n  let id = 0;\n  items.map((item) => {\n    let rowAux = {\n      id: 0,\n      fileName: \"\",\n      response: \"\",\n    };\n    rowAux.id = id;\n    id++;\n    rowAux.fileName = item.fileName;\n    rowAux.response = item.response;\n    if (rowAux.fileName) rowsAux.push(rowAux);\n  });\n  rowsAux = rowsAux.reverse();\n  for (let file of files) {\n    let rowAux = {\n      id: 0,\n      fileName: \"\",\n      response: \"\",\n    };\n    rowAux.id = id;\n    id++;\n    rowAux.fileName = file.fileName;\n    rowAux.response = file.response;\n    if (rowAux.fileName) rowsAux.push(rowAux);\n  }\n  console.log(rowsAux);\n  setFiles(rowsAux);\n}\n","import api from \"../../services/api\";\nimport React, { useState, useEffect } from \"react\";\nimport \"carbon-components/css/carbon-components.min.css\";\nimport Header from \"../../components/Header\";\nimport InfoTable from \"../../components/InfoTable\";\nimport UploadZone from \"../../components/UploadZone\";\nimport { useGlobalState } from \"../../hooks/globalState\";\nimport textLanguage from \"../../helpers/languagesConfig\";\nimport { createRows } from \"../../helpers/helpers\";\nimport { Loading } from \"carbon-components-react\";\nimport \"./style.css\";\n\nexport default function Dashboard({ match }) {\n  const { setLanguage } = useGlobalState();\n  const [mensagem, setMensagem] = useState(\"\");\n  const [files, setFiles] = useState([]);\n  const [company, setCompany] = useState(\"ibm\");\n\n  useEffect(() => {\n    setCompany(match.params.company);\n    if (match.params.language && textLanguage[match.params.language])\n      setLanguage(match.params.language);\n  }, []);\n\n  async function handleUpload(e) {\n    setMensagem();\n    let uploadedFiles = e.target.files;\n    let formData = new FormData();\n    for (let file of uploadedFiles) {\n      formData.append(\"file\", file);\n    }\n    let response = await api.post(\"/process\", formData);\n    console.log(response.data);\n    createRows(response.data, setFiles, files);\n    setMensagem(\"\");\n  }\n\n  return (\n    <div id=\"content\">\n      <Header />\n      <div className=\"fundo\">\n        <main>\n          <div className=\"container-principal\">\n            <div id=\"div_Content\">\n              <div id=\"campo_Entrada\">\n                <div>\n                  <UploadZone onUpload={handleUpload} />\n                </div>\n                <div>\n                  {mensagem !== \"\" ? (\n                    <div id=\"div_loader\">\n                      <div id=\"process\">\n                        <p>{mensagem}</p>\n                      </div>\n                      <section id=\"load\">\n                        <Loading color={\"#126DFB\"} />\n                      </section>\n                    </div>\n                  ) : (\n                    \"\"\n                  )}\n                </div>\n              </div>\n            </div>\n            <InfoTable rowData={files} />\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Route, Switch, BrowserRouter } from \"react-router-dom\";\nimport Dashboard from \"./pages/Dashboard/index\";\nimport GlobalStateProvider from \"./hooks/globalState\";\nexport default function Routes() {\n  return (\n    <BrowserRouter>\n      <GlobalStateProvider>\n        <Switch>\n          <Route exact path=\"/:company/:language\" component={Dashboard} />\n          <Route path=\"/\" component={Dashboard} />\n        </Switch>\n      </GlobalStateProvider>\n    </BrowserRouter>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './global.css';\nimport Routes from './routes';\nimport GlobalStateProvider from './hooks/globalState';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStateProvider>\n      <Routes />\n    </GlobalStateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}